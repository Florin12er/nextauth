datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
    name                  String?
    email                 String?                @unique
    newEmail              String?
    emailVerified         DateTime?
    image                 String?
    password              String?                @db.String
    role                  UserRole               @default(USER)
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    accounts              Account[]

    @@map("users")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique @db.String
    expires DateTime

    @@unique([email, token])
    @@map("verificationtokens")
}

model PasswordResetToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique @db.String
    expires DateTime

    @@unique([email, token])
    @@map("passwordresettokens")
}

model TwoFactorToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique @db.String
    expires DateTime

    @@unique([email, token])
    @@map("twofactortokens")
}

model TwoFactorConfirmation {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
    @@map("twofactorconfirmations")
}
